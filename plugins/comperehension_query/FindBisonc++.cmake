FIND_PROGRAM(BISONCPP_EXECUTABLE NAMES bisonc++
    HINTS
    ${PC_BISONCPP_EXEDIR}
)

if(BISONCPP_EXECUTABLE)
    message("FOUND BISON: " ${BISONCPP_EXECUTABLE})
    # internal macro
    # sets BISONCPP_TARGET_cmdopt
    macro(BISONCPP_TARGET_option_extraopts Options)
        set(BISONCPP_TARGET_cmdopt "")
        set(BISONCPP_TARGET_extraopts "${Options}")
        separate_arguments(BISONCPP_TARGET_extraopts)
        list(APPEND BISONCPP_TARGET_cmdopt ${BISONCPP_TARGET_extraopts})
    endmacro()

    # internal macro
    # sets BISONCPP_TARGET_output_header and BISONCPP_TARGET_cmdopt
    macro(BISONCPP_TARGET_option_defines BisonOutput Header)
        if("${Header}" STREQUAL "")
            # default header path generated by bison (see option -d)
            string(REGEX REPLACE "^(.*)(\\.[^.]*)$" "\\2" _fileext "${BisonOutput}")
            string(REPLACE "c" "h" _fileext ${_fileext})
            string(REGEX REPLACE "^(.*)(\\.[^.]*)$" "\\1${_fileext}"
                    BISONCPP_TARGET_output_header "${BisonOutput}")
            list(APPEND BISONCPP_TARGET_cmdopt "-d")
        else()
            set(BISONCPP_TARGET_output_header "${Header}")
            list(APPEND BISONCPP_TARGET_cmdopt "--defines=${BISONCPP_TARGET_output_header}")
        endif()
    endmacro()

    # internal macro
    # sets BISONCPP_TARGET_verbose_file and BISONCPP_TARGET_cmdopt
    macro(BISONCPP_TARGET_option_report_file BisonOutput ReportFile)
        if("${ReportFile}" STREQUAL "")
            get_filename_component(BISONCPP_TARGET_output_path "${BisonOutput}" PATH)
            get_filename_component(BISONCPP_TARGET_output_name "${BisonOutput}" NAME_WE)
            set(BISONCPP_TARGET_verbose_file
                    "${BISONCPP_TARGET_output_path}/${BISONCPP_TARGET_output_name}.output")
        else()
            set(BISONCPP_TARGET_verbose_file "${ReportFile}")
            list(APPEND BISONCPP_TARGET_cmdopt "--report-file=${BISONCPP_TARGET_verbose_file}")
        endif()
        if(NOT IS_ABSOLUTE "${BISONCPP_TARGET_verbose_file}")
            cmake_policy(GET CMP0088 _BISONCPP_CMP0088
                    PARENT_SCOPE # undocumented, do not use outside of CMake
                    )
            if("x${_BISONCPP_CMP0088}x" STREQUAL "xNEWx")
                set(BISONCPP_TARGET_verbose_file "${CMAKE_CURRENT_BINARY_DIR}/${BISONCPP_TARGET_verbose_file}")
            else()
                set(BISONCPP_TARGET_verbose_file "${CMAKE_CURRENT_SOURCE_DIR}/${BISONCPP_TARGET_verbose_file}")
            endif()
            unset(_BISONCPP_CMP0088)
        endif()
    endmacro()

    # internal macro
    # adds a custom command and sets
    #   BISONCPP_TARGET_cmdopt, BISONCPP_TARGET_extraoutputs
    macro(BISONCPP_TARGET_option_verbose Name BisonOutput filename)
        cmake_policy(GET CMP0088 _BISONCPP_CMP0088
                PARENT_SCOPE # undocumented, do not use outside of CMake
                )
        set(_BISONCPP_WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
        if("x${_BISONCPP_CMP0088}x" STREQUAL "xNEWx")
            set(_BISONCPP_WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
        endif()
        unset(_BISONCPP_CMP0088)

        list(APPEND BISONCPP_TARGET_cmdopt "--verbose")
        list(APPEND BISONCPP_TARGET_outputs
                "${BISONCPP_TARGET_verbose_file}")
        if (NOT "${filename}" STREQUAL "")
            if(IS_ABSOLUTE "${filename}")
                set(BISONCPP_TARGET_verbose_extra_file "${filename}")
            else()
                set(BISONCPP_TARGET_verbose_extra_file "${_BISONCPP_WORKING_DIRECTORY}/${filename}")
            endif()

            add_custom_command(OUTPUT ${BISONCPP_TARGET_verbose_extra_file}
                    COMMAND ${CMAKE_COMMAND} -E copy
                    "${BISONCPP_TARGET_verbose_file}"
                    "${filename}"
                    VERBATIM
                    DEPENDS
                    "${BISONCPP_TARGET_verbose_file}"
                    COMMENT "[BISON][${Name}] Copying bison verbose table to ${filename}"
                    WORKING_DIRECTORY ${_BISONCPP_WORKING_DIRECTORY})
            list(APPEND BISONCPP_TARGET_extraoutputs
                    "${BISONCPP_TARGET_verbose_extra_file}")
            unset(BISONCPP_TARGET_verbose_extra_file)
            unset(_BISONCPP_WORKING_DIRECTORY)
        endif()
    endmacro()

    #============================================================
    # BISONCPP_TARGET (public macro)
    #============================================================
    #
    macro(BISONCPP_TARGET Name BisonInput BisonOutput)
        set(BISONCPP_TARGET_outputs "${BisonOutput}")
        set(BISONCPP_TARGET_extraoutputs "")

        # Parsing parameters
        set(BISONCPP_TARGET_PARAM_OPTIONS
                )
        set(BISONCPP_TARGET_PARAM_ONE_VALUE_KEYWORDS
                COMPILE_FLAGS
                DEFINES_FILE
                REPORT_FILE
                )
        set(BISONCPP_TARGET_PARAM_MULTI_VALUE_KEYWORDS
                VERBOSE
                )
        cmake_parse_arguments(
                BISONCPP_TARGET_ARG
                "${BISONCPP_TARGET_PARAM_OPTIONS}"
                "${BISONCPP_TARGET_PARAM_ONE_VALUE_KEYWORDS}"
                "${BISONCPP_TARGET_PARAM_MULTI_VALUE_KEYWORDS}"
                ${ARGN}
        )

        if(NOT "${BISONCPP_TARGET_ARG_UNPARSED_ARGUMENTS}" STREQUAL "")
            message(SEND_ERROR "Usage")
        elseif("${BISONCPP_TARGET_ARG_VERBOSE}" MATCHES ";")
            # [VERBOSE [<file>] hack: <file> is non-multi value by usage
            message(SEND_ERROR "Usage")
        else()

            BISONCPP_TARGET_option_extraopts("${BISONCPP_TARGET_ARG_COMPILE_FLAGS}")
            BISONCPP_TARGET_option_defines("${BisonOutput}" "${BISONCPP_TARGET_ARG_DEFINES_FILE}")
            BISONCPP_TARGET_option_report_file("${BisonOutput}" "${BISONCPP_TARGET_ARG_REPORT_FILE}")
            if(NOT "${BISONCPP_TARGET_ARG_VERBOSE}" STREQUAL "")
                BISONCPP_TARGET_option_verbose(${Name} ${BisonOutput} "${BISONCPP_TARGET_ARG_VERBOSE}")
            else()
                # [VERBOSE [<file>]] is used with no argument or is not used
                set(BISONCPP_TARGET_args "${ARGN}")
                list(FIND BISONCPP_TARGET_args "VERBOSE" BISONCPP_TARGET_args_indexof_verbose)
                if(${BISONCPP_TARGET_args_indexof_verbose} GREATER -1)
                    # VERBOSE is used without <file>
                    BISONCPP_TARGET_option_verbose(${Name} ${BisonOutput} "")
                endif()
            endif()

            list(APPEND BISONCPP_TARGET_outputs "${BISONCPP_TARGET_output_header}")

            cmake_policy(GET CMP0088 _BISONCPP_CMP0088
                    PARENT_SCOPE # undocumented, do not use outside of CMake
                    )
            set(_BISONCPP_WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
            set(_BisonInput "${BisonInput}")
            if("x${_BISONCPP_CMP0088}x" STREQUAL "xNEWx")
                set(_BISONCPP_WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
                if(NOT IS_ABSOLUTE "${_BisonInput}")
                    set(_BisonInput "${CMAKE_CURRENT_SOURCE_DIR}/${_BisonInput}")
                endif()
            endif()
            unset(_BISONCPP_CMP0088)

            add_custom_command(OUTPUT ${BISONCPP_TARGET_outputs}
                    COMMAND ${BISONCPP_EXECUTABLE} #${BISONCPP_TARGET_cmdopt}
                            --target-directory=${CMAKE_CURRENT_BINARY_DIR}
                            #-o ${BisonOutput}
                            ${_BisonInput}
                    VERBATIM
                    DEPENDS ${_BisonInput}
                    COMMENT "[BISON][${Name}] Building parser with bison ${BISONCPP_VERSION}"
                    WORKING_DIRECTORY ${_BISONCPP_WORKING_DIRECTORY})

            unset(_BISONCPP_WORKING_DIRECTORY)

            # define target variables
            set(BISONCPP_${Name}_DEFINED TRUE)
            set(BISONCPP_${Name}_INPUT ${_BisonInput})
            set(BISONCPP_${Name}_OUTPUTS ${BISONCPP_TARGET_outputs} ${BISONCPP_TARGET_extraoutputs})
            set(BISONCPP_${Name}_COMPILE_FLAGS ${BISONCPP_TARGET_cmdopt})
            set(BISONCPP_${Name}_OUTPUT_SOURCE "${BisonOutput}")
            set(BISONCPP_${Name}_OUTPUT_HEADER "${BISONCPP_TARGET_output_header}")

            unset(_BisonInput)

        endif()
    endmacro()
endif()

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Bisonc++ DEFAULT_MSG BISONCPP_EXECUTABLE)

MARK_AS_ADVANCED(BISONCPP_EXECUTABLE)